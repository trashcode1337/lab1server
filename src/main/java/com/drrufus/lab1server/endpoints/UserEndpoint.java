package com.drrufus.lab1server.endpoints;

import com.drrufus.autogenerated.GetUserRequest;
import com.drrufus.autogenerated.GetUserResponse;
import com.drrufus.autogenerated.GetUserResponse.Users;
import com.drrufus.autogenerated.User;
import com.drrufus.lab1server.dao.UserDao;
import com.drrufus.lab1server.exceptions.ServiceFault;
import com.drrufus.lab1server.exceptions.ServiceFaultException;
import com.drrufus.lab1server.service.UserService;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;


@Endpoint
public class UserEndpoint {
    
    private static final String NAMESPACE_URI = "http://drrufus.com/autogenerated";
    
    private static transient Logger logger = LoggerFactory.getLogger(UserEndpoint.class);
    
    @Autowired
    private UserService userService;
    
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getUserRequest")
    @ResponsePayload
    public GetUserResponse getUser(@RequestPayload GetUserRequest request) {
        logger.info("A new received SOAP-request with params:");
        logger.info("id: {}; login: {}; name: {}; email: {}; password: {}",
                request.getId(), request.getLogin(), request.getName(),
                request.getEmail(), request.getPass());
        GetUserResponse response = new GetUserResponse();
        try {
            
            
            List<User> users = userService.getUserByParams(request.getId(), request.getLogin(), 
                    request.getName(), request.getEmail(), request.getPass());
            response.setUsers(new Users());
            for (User user : users) {
                logger.info("user {}/{}", user.getLogin(), user.getPass());
                response.getUsers().getUser().add(user);
            }
            
            
            //response.setUsers(new Users());
            //response.setUser(userService.getUserById(request.getId()));
            
        }
        catch (Exception e) {
            logger.error("Error while searching: " + e.getMessage());

            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_FOUND", "The user with specified params is not found"));
        }
        
        return response;
    }
}
